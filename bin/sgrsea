#!/usr/bin/env python
import sys

import argparse
import logging
import os
import sgrsea

logging.basicConfig(format='%(levelname)s:%(message)s',level=logging.DEBUG)

sgrsea_VERSION = "v1.0.0"

def prepare_argparser():
  description = "sgRSEA: identify significant genes in CRISPR-Cas9 experiment"
  epilog = "For command line options of each command, type %(prog)s COMMAND -h"
  argparser = argparse.ArgumentParser(description=description, epilog = epilog)
  argparser.add_argument("--version", action="version", version="%(prog)s "+sgrsea_VERSION)
  subparsers = argparser.add_subparsers( dest = 'subcommand_name' )
  
  #command for run the whole suite
  add_run_parser(subparsers)
  #command for sgcount
  add_count_parser(subparsers)
  #command for normalization
  add_normalization_parser(subparsers)
  #command for reformat
  add_reformat_parser(subparsers)
  #command for stattest
  add_rank_parser(subparsers)
  return(argparser)

def add_run_parser(subparsers):
  '''Add argument parsers for running whole suite
  '''
  subc_run = subparsers.add_parser("run", help="Run the whole program from fastq to result")
  group = subc_run.add_mutually_exclusive_group()
  group.add_argument("-i","--input",dest = "infile",type=str, help="Input fastq")
  group.add_argument("-d","--design",dest="designfile",type=str,help = "Design file")
  subc_run.add_argument("-o","--output",dest = "outfile",type=str,required=True, help="Output prefix")
  subc_run.add_argument("-l","--library",dest="libfile",type=str, help = "Gene locus in bed format")
  subc_run.add_argument("--sgstart",dest="sgstart",type=int, default=-1,help = "The first nucleotide sgRNA starts. 1-index")
  subc_run.add_argument("--sgstop",dest="sgstop",type=int, default=-1,help = "The last nucleotide sgRNA starts. 1-index")
  subc_run.add_argument("--trim3",dest="trim3",type=str,help = "The trimming pattern from 3'. This pattern and the following sequence will be removed")
  subc_run.add_argument("--num-threads",dest="threads",type=int,default=5,help = "Number of threads to use.")
  subc_run.add_argument("--file-type",dest="filetype",type=str,default="fqgz",help = "Type of the input file. Can be fq, fa, fqgz. Default is fqgz", choices=['fq','fa','fqgz'])
  subc_run.add_argument("--normalize-method",dest="method", default="total", type=str,help ="Design file", choices=['cpm','total','median','upperquantile'])
  subc_run.add_argument("--split-lib",dest = "splitlib",action='store_true', help="Lib A and B are sequenced separately")
  subc_run.add_argument("-t","--treatment",dest="treat",type=str,required=True, help = "Columns/name of treatment samples")
  subc_run.add_argument("-c","--control",dest="ctrl",type=str,required=True, help="Columns/name of control samples")
  subc_run.add_argument("--multiplier",dest = "multiplier",type=int, default = 50, help = "Multiplier to generate background")
  subc_run.add_argument("--random-seed",dest = "randomSeed",type=int, default = None, help = "Random seed to control permuation process")
  subc_run.add_argument("--collapse-replicates",dest="collapsemethod",type=str, help = "Way to collapse replicates", default="None", choices=['auto','stack','mean','None'])
  subc_run.add_argument("--no-count", dest="nocount", default=False, action='store_true', help="Skip counting step. Uses output contents as input")
  #subc_run.add_argument("--bgtag",dest = "bgtag",type=str, default = "",help = "Sting to identify control sgRNAs")
  #subc_run.add_argument("--bg-row-start",dest = "bgrowstart",type=int,default = -1, help = "Row count of the start of control sgRNA block")
  #subc_run.add_argument("--bg-row-stop",dest = "bgrowstop",type=int, default=-1, help = "Row count of the stop of control sgRNA block")
  return

def add_count_parser(subparsers):
  '''Add argument parsers for sgcount
  '''
  subc_count = subparsers.add_parser("count", help="Get sgRNA count matrix")
  group = subc_count.add_mutually_exclusive_group()
  group.add_argument("-i","--input",dest = "infile",type=str, help="Input fastq")
  group.add_argument("-d","--design",dest="designfile",type=str,help = "Design file")
  subc_count.add_argument("-o","--output",dest = "outfile",type=str,required=True, help="Output")
  subc_count.add_argument("-l","--library",dest="libfile",type=str, help = "Gene locus in bed format")
  subc_count.add_argument("--sgstart",dest="sgstart",type=int, default=-1,help = "The first nucleotide sgRNA starts. 1-index")
  subc_count.add_argument("--sgstop",dest="sgstop",type=int, default=-1,help = "The last nucleotide sgRNA starts. 1-index")
  subc_count.add_argument("--trim3",dest="trim3",type=str,help = "The trimming pattern from 3'. This pattern and the following sequence will be removed")
  subc_count.add_argument("--num-threads",dest="threads",type=int, default=5,help = "Number of threads to use.")
  subc_count.add_argument("--file-type",dest="filetype",type=str,default="fqgz",help = "Type of the input file. Can be fq, fa, fqgz. Default is fqgz", choices=['fq','fa','fqgz'])
  return

def add_normalization_parser(subparsers):
 '''Add argument parser for normalization
 '''
 subc_normalization = subparsers.add_parser("normalize", help = "Normalize sgRNA count matrix")
 subc_normalization.add_argument("-i","--input",dest = "infile",type=str, required=True, help="Input count file matrix")
 subc_normalization.add_argument("--normalize-method",dest="method", default="total", type=str,help ="Design file", choices=['cpm','total','median','upperquantile'])
 subc_normalization.add_argument("-o","--output",dest = "outfile",type=str,required=True, help="Output")
 subc_normalization.add_argument("--split-lib",dest = "splitlib",action='store_true', help="Lib A and B are sequenced separately")
 return

def add_reformat_parser(subparsers):
  '''Add argument parser for reformatting count table
  '''
  subc_reformat = subparsers.add_parser("reformat", help="Reformat count table for sgRSEA stat test")
  subc_reformat.add_argument("-i","--input",dest = "infile",type=str,required=True, help="Input count file")
  subc_reformat.add_argument("-o","--output",dest = "outfile",type=str,required= True, help="Output")
  subc_reformat.add_argument("-d","--design",dest = "designfile",type=str, help= "Design file")
  subc_reformat.add_argument("-t","--treatment",dest="treat",type=str,required=True, help = "Columns/name of treatment samples")
  subc_reformat.add_argument("-c","--control",dest="ctrl",type=str,required=True , help="Columns/name of control samples")
  subc_reformat.add_argument("--collapse-replicates",dest="collapsemethod",type= str, help = "Way to collapse replicates", default="auto", choices=['auto','stack','mean'])


def add_rank_parser(subparsers):
  '''Add argument parser for statistical test
  '''
  subc_rank = subparsers.add_parser("rank", help="Identify significant genes from normalized count table")
  subc_rank.add_argument("-i","--input",dest = "infile",type=str,required=True, help = "sgRSEA input file, should be normalized")
  subc_rank.add_argument("-o","--output",dest = "outfile",type=str,required=True, help = "Output file name")
  subc_rank.add_argument("-d","--design",dest = "designfile", type=str, help="Design file")
  subc_rank.add_argument("-t","--treatment",dest="treat",type=str,required=True, help = "Columns/name of treatment samples")
  subc_rank.add_argument("-c","--control",dest="ctrl",type=str,required=True , help="Columns/name of control samples")
  subc_rank.add_argument("--multiplier",dest = "multiplier",type=int, default = 50, help = "Multiplier to generate background")
  subc_rank.add_argument("--random-seed",dest = "randomSeed",type=int, default = None, help = "Random seed to control permuation process")
  subc_rank.add_argument("--collapse-replicates",dest = "collapsemethod",type=str, default = "None",help = "Way to collapse replicates", choices=['auto','stack','mean','None'])
  #subc_stattest.add_argument("--bg-row-start",dest = "bgrowstart",type=int,default = -1, help = "Row count of the start of control sgRNA block")
  #subc_stattest.add_argument("--bg-row-stop",dest = "bgrowstop",type=int, default=-1, help = "Row count of the stop of control sgRNA block")
  return


def main():
  arg_parser = prepare_argparser()
  args = arg_parser.parse_args()
  subcommand  = args.subcommand_name
  if subcommand == "count":
    #import sgcount_fastq
    sgrsea.sgcount.run(args)
  elif subcommand == "normalize":
    sgrsea.normalization.run(args)
  elif subcommand == "reformat":
    sgrsea.reformatCountTable.run(args)
  elif subcommand == "rank":
    sgrsea.rankgene.run(args)
  elif subcommand == "run":
    sgrsea.runsgrsea.run(args)

if __name__=="__main__":
  main()
