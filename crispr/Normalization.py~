#!/usr/bin/python
# programmer : bbc
# usage:

import sys
import re
import random
import string
import logging
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def percentile(n):
	def percentile_(x):
		return np.percentile(x,n)
	percentile_.__name__ = 'percentile_%s' % n
	return percentile_

def around(n):# decimal parameter, return integer
	def around_(x):
		return np.around(x,decimals=n)
	around_.__name__= 'around_%s' % n
	return around_

def norm(infile,method,flag="single"):
	#first deal with sample size normalization
	if method == "upperquartile":
		norm_factor = infile.iloc[:,2:].apply(percentile(75),axis=0).astype(float)
		smooth_factor = float(norm_factor.mean(axis=1))	
	elif method == "total":
		norm_factor = infile.iloc[:,2:].apply(np.sum,axis=0).astype(float)
		smooth_factor = 10**6 * 1.0
	#Normalize for sample size	
	infile.iloc[:,2:] = infile.iloc[:,2:].div(norm_factor/float(smooth_factor),axis="columns")
	#round it to the nearest even number
	infile.iloc[:,2:] = infile.iloc[:,2:].apply(around(0)).convert_objects(convert_numeric=True)
	return infile


def main():
	infile = pd.read_table(sys.argv[1],sep="\t")
	print norm(infile,"upperquartile","single")

if __name__ == '__main__':
	main()
	
